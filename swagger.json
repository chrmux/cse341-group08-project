{
    "swagger": "2.0",
    "info": {
        "title": "Recipe Book",
        "description": "API System for Recipe Book",
        "version": "1.0.0",
        "contact": {
            "name": "CSE341-GROUP08 Project Github Repo Link",
            "url": "https://github.com/chrmux/cse341-group08-project"
        }
    },
    "server": [
        {
            "url": "https://cse341-group08-project.onrender.com/api-docs",
            "description": "Live server"
        }
    ],
    "tags": [{
            "name": "Auth",
            "description": "Authentication Endpoints (Public)"
        },
        {
            "name": "Recipes",
            "description": "Recipe Endpoints (Public + Private)"
        },
        {
            "name": "Keywords",
            "description": "Keyword Endpoints (Public + Private)"
        },
        {
            "name": "Ingredients",
            "description": "Ingredient Endpoints (Public + Private)"
        },
        {
            "name": "Photo",
            "description": "Photo Endpoints (Public + Private)"
        },
        {
            "name": "Users",
            "description": "User Endpoints (Admin + Public)"
        }
    ],
    "securityDefinitions": {
        "oauth2": {
          "type": "oauth2",
          "flow": "implicit",
          "authorization": "/oauth/authorize",
          "token": "/oauth/token",
          "scopes": {
            "read": "Grants read access"
          }
        }
      },
    "host": "cse341-group08-project.onrender.com/api-docs",
    "schemes": ["https"],
    "consumes": ["application/json"],
    "produces": ["application/json"],
    "paths": {
        "/signup": {
            "post": {
                "tags": ["Auth"],
                "summary": "Create user",
                "description": "This is for when a user creates an account.",
                "operationId": "createUser",
                "produces": ["application/json"],
                "parameters": [
                  {
                    "in": "body",
                    "name": "body",
                    "description": "Created user object",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "username": {
                                "type": "string",
                                "example": "any"
                            },
                            "email": {
                                "type": "string",
                                "example": "any"
                            },
                            "password": {
                                "type": "string",
                                "example": "any"
                            }
                        }
                    }
                  }
                ],
                "responses": {
                  "201": {
                    "description": "successfully created user",
                    "schema": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "name": {
                          "type": "string",
                          "example": "any"
                        }
                      }
                    }
                  },
                  "400": {
                    "description": "Invalid theme name value"
                  }
                }
              }
            },
            "/user/login": {
                "get": {
                  "tags": ["Auth"],
                  "summary": "Logs user into the system",
                  "operationId": "loginUser",
                  "produces": ["application/json"],
                  "parameters": [
                    {
                      "name": "username",
                      "in": "query",
                      "description": "The user name for login",
                      "required": true,
                      "type": "string"
                    },
                    {
                      "name": "password",
                      "in": "query",
                      "description": "The password for login in clear text",
                      "required": true,
                      "type": "string"
                    }
                  ],
                  "responses": {
                    "200": {
                      "description": "successful operation",
                      "headers": {
                        "X-Rate-Limit": {
                          "type": "integer",
                          "format": "int32",
                          "description": "calls per hour allowed by the user"
                        },
                        "X-Expires-After": {
                          "type": "string",
                          "format": "date-time",
                          "description": "date in UTC when token expires"
                        }
                      },
                      "schema": {
                        "type": "string"
                      }
                    },
                    "400": {
                      "description": "Invalid username/password supplied"
                    }
                  }
                }
              },
        "/recipes": {
            "post": {
                "tags": ["Recipes"],
                "summary": "Create a Recipe",
                "description": "Create new Recipe in database",
                "operationId": "createRecipe",
                "parameters": [{
                        "name": "recipes",
                        "description": "Recipe params to create new recipe",
                        "in": "body",
                        "required": "true",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "photo": {
                                    "type": "string"
                                },
                                "title": {
                                    "type": "string"
                                },
                                "ingredients": {
                                    "type": "string"
                                },
                                "instruction": {
                                    "type": "string"
                                },
                                "creator": {
                                    "type": "string",
                                    "schema": {
                                        "$ref": "#/components/schemas/Id"
                                    }
                                },
                                "keywords": {
                                    "type": "string"
                                },
                                "culture": {
                                    "type": "string"
                                },
                                "level": {
                                    "type": "string"
                                },
                                "description": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    {
                        "name": "authorization",
                        "description": "Access token to authorize the user",
                        "in": "header",
                        "type": "string",
                        "required": true
                    }
                ],
                "produces": ["application/json"],
                "responses": {
                    "200": {
                        "description": "New Recipe Created"
                    }
                }
            },
            "get": {
                "tags": ["Recipes"],
                "summary": "Fetch All Recipes",
                "description": "Find all Recipes from the database",
                "operationId": "getallRecipe",
                "produces": ["application/json"],
                "responses": {
                    "200": {
                        "description": "ok"
                    }
                }
            }
        },
        "/recipes/id":{
            "get": {
                "tags": ["Recipes"],
                "summary": "Fetch item by Id",
                "description": "Find one from the database",
                "operationId": "getRecipeById",
                "produces": ["application/json"],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": "true",
                    "description": "Id of the recipe"
                },
                {
                    "name": "authorization",
                    "description": "Access token to authorize the user",
                    "in": "header",
                    "type": "string",
                    "required": true
                }
            ],
                "responses": {
                    "200": {
                        "description": "Recipe has been found"
                    }
                }
            },
            "put": {
                "tags": ["Recipes"],
                "summary": "Update Recipe Data",
                "description": "Update the existing Recipe in database",
                "operationId": "updateRecipe",
                "parameters": [{
                    "name": "recipes",
                    "description": "Recipe params to update the recipe",
                    "in": "body",
                    "schema": {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "string"
                            },
                            "photo": {
                                "type": "string",
                                "example": "any"
                            },
                            "title": {
                                "type": "string",
                                "example": "any"
                            },
                            "ingredients": {
                                "type": "string",
                                "example": "any"
                            },
                            "instruction": {
                                "type": "string",
                                "example": "any"
                            },
                            "creator": {
                                "type": "string",
                                "id": {
                                    "type": "string"
                                }
                            },
                            "keywords": {
                                "type": "string"
                            },
                            "culture": {
                                "type": "string"
                            },
                            "level": {
                                "type": "string"
                            },
                            "description": {
                                "type": "string"
                            }
                        }
                    }
                }],
                "produces": ["application/json"],
                "responses": {
                    "200": {
                        "description": "Recipe has been Updated"
                    }
                }
            },
    "delete": {
            "tags": ["Recipes"],
            "summary": "Delete Item",
            "description": "Delete Recipe from the database",
            "operationId": "deleteRecipe",
            "produces": ["application/json"],
            "parameters": [{
                "name": "id",
                "in": "path",
                "required": "true",
                "description": "Id of the recipe",
                "type": "String"

            },
            {
                "name": "authorization",
                "description": "Access token to authorize the user",
                "in": "header",
                "type": "string",
                "required": true
            }
        ],
            "responses": {
                "200": {
                    "description": "Recipe has deleted"
                }
            }
        }
    },
        "/recipes/{name}": {
            "parameters": [{
                    "name": "name",
                    "in": "path",
                    "required": "true",
                    "description": "name of the recipe",
                    "type": "String"

                },
                {
                    "name": "authorization",
                    "description": "Access token to authorize the user",
                    "in": "header",
                    "type": "string",
                    "required": true
                }
            ],
            "get": {
                "tags": ["Recipes"],
                "summary": "Fetch item by name",
                "description": "Find one from the database",
                "operationId": "getRecipeByName",
                "produces": ["application/json"],
                "responses": {
                    "200": {
                        "description": "Recipe has been found"
                    }
                }
            }
        },
        "/recipes/{keyword}": {
            "parameters": [{
                    "name": "keyword",
                    "in": "path",
                    "required": "true",
                    "description": "keyword of the recipe",
                    "type": "String"

                },
                {
                    "name": "authorization",
                    "description": "Access token to authorize the user",
                    "in": "header",
                    "type": "string",
                    "required": true
                }
            ],
            "get": {
                "tags": ["Recipes"],
                "summary": "Fetch item(s) by keyword(s)",
                "description": "Find one from the database",
                "operationId": "getRecipeByKeyword",
                "produces": ["application/json"],
                "responses": {
                    "200": {
                        "description": "Recipe has been found"
                    }
                }
            }
        },
        "/keywords": {
            "post": {
                "tags": ["Keywords"],
                "summary": "Create a Keyword",
                "description": "Create new keyword in database",
                "operationId": "createKeyword",
                "parameters": [{
                    "name": "authorization",
                    "description": "Access token to authorize the user",
                    "in": "header",
                    "type": "string",
                    "required": true                        
                    },
                    {
                        "name": "keywords",
                        "description": "Keyword params to create new keyword",
                        "in": "body",
                        "required": "true",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "classification": {
                                    "type": "string",
                                    "example": "any"
                                },
                                "name": {
                                    "type": "string",
                                    "example": "any"
                                }
                            }
                        }
                    }
                ],
                "produces": ["application/json"],
                "responses": {
                    "200": {
                        "description": "New Keyword Created"
                    }
                }
            },
            "get": {
                "tags": ["Keywords"],
                "summary": "Fetch all keywords",
                "description": "Find all keyword from the database",
                "operationId": "getallKeyword",
                "parameters": [{
                    "name": "authorization",
                    "description": "Access token to authorize the user",
                    "in": "header",
                    "type": "string",
                    "required": true
                }],
                "produces": ["application/json"],
                "responses": {
                    "200": {
                        "description": "ok"
                    }
                }
            }
        },
        "/keywords/{id}": {
            "parameters": [{
                    "name": "authorization",
                    "description": "Access token to authorize the user",
                    "in": "header",
                    "type": "string",
                    "required": true
                },
                {                   
                    "name": "id",
                    "in": "path",
                    "required": "true",
                    "description": "id of the keyword",
                    "type": "String"
                }
            ],
            "get": {
                "tags": ["Keywords"],
                "summary": "Fetch keyword by ID",
                "description": "Find one from the database",
                "operationId": "getKeywordById",
                "produces": ["application/json"],
                "responses": {
                    "200": {
                        "description": "Keyword has been found"
                    }
                }
            },
            "put": {
                "tags": ["Keywords"],
                "summary": " Update Keyword By ID",
                "description": "Update the existing keyword in database",
                "operationId": "updateKeywords",
                "parameters": [{
                    "name": "keyword",
                    "description": "Keyword params to update the keyword",
                    "in": "body",
                    "schema": {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "string"
                            },
                            "classification": {
                                "type": "string",
                                "example": "any"
                            },
                            "name": {
                                "type": "string",
                                "example": "any"
                            }
                        }
                    }
                }],
                "produces": ["application/json"],
                "responses": {
                    "200": {
                        "description": "Keyword has been Updated"
                    }
                }
            },
            "delete": {
                "tags": ["Keywords"],
                "summary": " Delete keyword By ID",
                "description": "Delete keyword from the database",
                "operationId": "deleteKeywords",
                "produces": ["application/json"],
                "responses": {
                    "200": {
                        "description": "Keyword has deleted"
                    }
                }
            }            
        },
        "/keywords/{classification}": {
            "parameters": [{
                    "name": "authorization",
                    "description": "Access token to authorize the user",
                    "in": "header",
                    "type": "string",
                    "required": true
                },
                {                   
                    "name": "classification",
                    "in": "path",
                    "required": "true",
                    "description": "classification of the keyword",
                    "type": "String"
                }
            ],
            "get": {
                "tags": ["Keywords"],
                "summary": "Fetch keywords by classification",
                "description": "Find one from the database",
                "operationId": "getKeywordByClassification",
                "produces": ["application/json"],
                "responses": {
                    "200": {
                        "description": "Keyword has been found"
                    }
                }
            }
        },
        "/ingredients": {
            "post": {
                "tags": ["Ingredients"],
                "summary": "Create Ingredients",
                "description": "Create new Ingredient in database",
                "parameters": [{

                        "name": "authorization",
                        "description": "Access token to authorize the user",
                        "in": "header",
                        "type": "string",
                        "required": true
                        
                    },
                    {
                        "name": "ingredients",
                        "description": "Ingredient params to create new ingredient",
                        "in": "body",
                        "required": "true",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "name": {
                                    "type": "string",
                                    "example": "any"
                                },
                                "description": {
                                    "type": "string",
                                    "example": "any"
                                },
                                "category": {
                                    "type": "string",
                                    "example": "any"
                                }
                            }
                        }
                    }
                ],
                "produces": ["application/json"],
                "responses": {
                    "200": {
                        "description": "New Ingredient Created"
                    }
                }
            },
            "get": {
                "tags": ["Ingredients"],
                "summary": "Fetch All Ingredients",
                "description": "Find all ingredients from the database",
                "operationId": "getIngredients",
                "parameters": [{
                    "name": "authorization",
                    "description": "Access token to authorize the user",
                    "in": "header",
                    "type": "string",
                    "required": true
                }],
                "produces": ["application/json"],
                "responses": {
                    "200": {
                        "description": "All the Ingredients"
                    }
                }
            }
        },
        "/ingredients/{id}": {
            "parameters": [{
                    "name": "authorization",
                    "description": "Access token to authorize the user",
                    "in": "header",
                    "type": "string",
                    "required": true
                },
                {
                    "name": "id",
                    "in": "path",
                    "required": "true",
                    "description": "id of the Ingredient",
                    "type": "String"
                }
            ],
            "get": {
                "tags": ["Ingredients"],
                "summary": "Fetch Ingredient",
                "description": "Find one from the database",
                "operationId": "getIngredientsById",
                "produces": ["application/json"],
                "responses": {
                    "200": {
                        "description": "Ingredient has been found"
                    }
                }
            },
            "put": {
                "tags": ["Ingredients"],
                "summary": "Update Ingredients",
                "description": "Update the existing ingredient in database",
                "operationId": "updateIngredient",
                "parameters": [{
                    "name": "ingredient",
                    "description": "Ingredient params to update the ingredient",
                    "in": "body",
                    "schema": {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "string"
                            },
                            "name": {
                                "type": "string",
                                "example": "any"
                            },
                            "data": {
                                "type": "string",
                                "example": "any"
                            },
                            "category": {
                                "type": "string",
                                "example": "any"
                            }
                            
                        }
                    }
                }],
                "produces": ["application/json"],
                "responses": {
                    "200": {
                        "description": "Ingredient has been Updated"
                    }
                }
            },
            "delete": {
                "tags": ["Ingredients"],
                "summary": "Delete Ingredient",
                "description": "Delete ingredient from the database",
                "operationId": "deleteIngredient",
                "produces": ["application/json"],
                "responses": {
                    "200": {
                        "description": "Ingredient has deleted"
                    }
                }
            }
            
        },
        "/ingredients/{name}": {
            "parameters": [
                {
                    "name": "authorization",
                    "description": "Access token to authorize the user",
                    "in": "header",
                    "type": "string",
                    "required": true
                },{
                    "name": "name",
                    "in": "path",
                    "required": "true",
                    "description": "name of the ingredient",
                    "type": "String"

                }
                
            ],
            "get": {
                "tags": ["Ingredients"],
                "summary": "Fetch ingredients by name",
                "description": "Find one from the database",
                "operationId": "getRecipeByIngredient",
                "produces": ["application/json"],
                "responses": {
                    "200": {
                        "description": "ingredients has been found"
                    }
                }
            }
        },
        "/photos": {
            "post": {
                "tags": ["Photo"],
                "summary": "Create photo",
                "description": "Create new Photo in database",
                "operationId": "createPhoto",
                "parameters": [{
                    "name": "authorization",
                    "description": "Access token to authorize the user",
                    "in": "header",
                    "type": "string",
                    "required": true                        
                    },
                    {
                        "name": "photo",
                        "description": "Photo params to create new photo",
                        "in": "body",
                        "required": "true",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "title": {
                                    "type": "string",
                                    "example": "any"
                                },
                                "photoUrl": {
                                    "type": "string",
                                    "example": "any"
                                }
                            }
                        }
                    }
                ],
                "produces": ["application/json"],
                "responses": {
                    "200": {
                        "description": "New Photo Created"
                    }
                }
            },
            "get": {
                "tags": ["Photo"],
                "summary": "Fetch All Photos",
                "description": "Find all Photo from the database",
                "operationId": "getallPhoto",
                "parameters": [{
                    "name": "authorization",
                    "description": "Access token to authorize the user",
                    "in": "header",
                    "type": "string",
                    "required": true
                }],
                "produces": ["application/json"],
                "responses": {
                    "200": {
                        "description": "All the Photo"
                    } 
                }
            }
        },
        "/photos/{id}": {
            "parameters": [{
                    "name": "authorization",
                    "description": "Access token to authorize the user",
                    "in": "header",
                    "type": "string",
                    "required": true
                },
                {                   
                    "name": "id",
                    "in": "path",
                    "required": "true",
                    "description": "id of the Photo",
                    "type": "String"
                }
            ],
            "get": {
                "tags": ["Photo"],
                "summary": "Fetch Photo By ID",
                "description": "Find one from the database",
                "operationId": "getPhotoById",
                "produces": ["application/json"],
                "responses": {
                    "200": {
                        "description": "Photo has been found"
                    }
                }
            },
            "put": {
                "tags": ["Photo"],
                "summary": "Update Photo By ID",
                "description": "Update the existing Photo in database",
                "operationId": "updatePhoto",
                "parameters": [{
                    "name": "photo",
                    "description": "Photo params to update the photo",
                    "in": "body",
                    "schema": {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "string"
                            },
                            "title": {
                                "type": "string",
                                "example": "any"
                            },
                            "photoUrl": {
                                "type": "string",
                                "example": "any"
                            }
                        }
                    }
                }],
                "produces": ["application/json"],
                "responses": {
                    "200": {
                        "description": "Photo has been Updated"
                    }
                }
            },
            "delete": {
                "tags": ["Photo"],
                "summary": "Delete Photo By ID",
                "description": "Delete photo from the database",
                "operationId": "deletePhoto",
                "produces": ["application/json"],
                "responses": {
                    "200": {
                        "description": "Photo has deleted"
                    }
                }
            }
        },
        "/users": {
            "get": {
                "tags": ["Users"],
                "summary": "Get All Profile Data",
                "description": "Find all users from the database",
                "operationId": "getAllUser",
                "parameters": [{
                    "name": "authorization",
                    "description": "Access token to authorize the user",
                    "in": "header",
                    "type": "string",
                    "required": true
                }],
                "produces": ["application/json"],
                "responses": {
                    "200": {
                        "description": "Found All the Users"
                    }
                }
            }
        },
        "/users/id": {
            "get": {
                "tags": ["Users"],
                "summary": "Get User Profile Data by Id",
                "description": "Find single users from the database",
                "operationId": "getSingleUser",
                "parameters": [{
                    "name": "authorization",
                    "description": "Access token to authorize the user",
                    "in": "header",
                    "type": "string",
                    "required": true
                },
                {             
                    "name": "id",
                    "in": "path",
                    "required": "true",
                    "description": "id of the User",
                    "type": "String"   
                }],
                "produces": ["application/json"],
                "responses": {
                    "200": {
                        "description": "Found User"
                    }
                }

        },
            "put": {
                "tags": ["Users"],
                "summary": "Update User Profile Data",
                "description": "Update single user from the database",
                "operationId": "getSingleUser",
                "parameters": [{
                    "name": "authorization",
                    "description": "Access token to authorize the user",
                    "in": "body",
                    "schema": {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "string"
                            },
                            "username": {
                                "type": "string",
                                "example": "any"
                            },
                            "email": {
                                "type": "string",
                                "example": "any"
                            }
                        }
                    }
                }],
                "produces": ["application/json"],
                "responses": {
                    "200": {
                        "description": "User Data Updated"
                    }
                }
            },
            "delete": {
                "summary": "Delete User Profile Data",
                "tags": [
                    "Users"
                ],
                "parameters": [{
                    "name": "authorization",
                    "description": "Access token to authorize the user",
                    "in": "header",
                    "type": "string",
                    "required": true
                },
                {             
                    "name": "id",
                    "in": "path",
                    "required": "true",
                    "description": "id of the User",
                    "type": "String"   
                }],
                "produces": ["application/json"],
                "responses": {
                    "200": {
                        "description": "Delete User"
                    }
                }
                
            },
            "patch": {
                "tags": ["Users"],
                "summary": "Update User Profile(including Password)",
                "description": "Update single user from the database",
                "operationId": "updateUserData",
                "parameters": [{
                    "name": "authorization",
                    "description": "Access token to authorize the user",
                    "in": "header",
                    "schema": {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "string"
                            },
                            "username": {
                                "type": "string",
                                "example": "any"
                            },
                            "email": {
                                "type": "string",
                                "example": "any"
                            },
                            "password": {
                                "type": "string",
                                "example": "any"
                            }
                        }
                    }
                }],
                "produces": ["application/json"],
                "responses": {
                    "200": {
                        "description": "Data Updated"
                    }
                }
            }
        }
    },
    "definitions": {
        "securityDefinitions": {
            "oauth2": {
              "type": "oauth2",
              "flow": "implicit",
              "authorizationUrl": "https://your-auth-server.com/oauth/authorize",
              "scopes": {
                "read": "Grants read access"
              }
            }
          },
        "User": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer"
            },
            "username": {
              "type": "string"
            }
          }
        },
      "ingredients": {
        "type": "object",
        "properties": {
            "ingredientId": {
                "type": "string",
                "example": "any"
            },
            "description": {
                "type": "string",
                "example": "any"
            },
            "category": {
                "type": "object",
                "example": "any"
            }
        }
    },
    "recipes": {
        "type": "object",
        "properties": {
            "userId": {
                "type": "string",
                "example": "any"
            },
            "recipe info": {
                "schema": {
                    "type": "object",
                    "properties": {
                        "photo": {
                            "type": "string"
                        },
                        "title": {
                            "type": "string"
                        },
                        "ingredients": {
                            "type": "string"
                        },
                        "instruction": {
                            "type": "string"
                        },
                        "creator": {
                            "type": "array"
                            
                        },
                        "keywords": {
                            "type": "string"
                        },
                        "Culture": {
                            "type": "string"
                        },
                        "level": {
                            "type": "string"
                        },
                        "description": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "photo": {
        "type": "object",
        "properties": {
            "objectId": {
                "type": "string",
                "example": "any"
            },
            "title": {
                "type": "object",
                "example": "any"
            },
            "photoUrl": {
                "type": "string",
                "example": "any"
            }
        }
    },
      "credentials": {
        "type": "object",
        "required": ["password", "username"],
        "properties": {
          "username": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        }
      },
      "Id": {
        "type": "string",
        "example": "550e8400-e29b-41d4-a716-446655440000"
    },
    "name": {
        "type": "string",
        "example": "Pork Loin Ribs"
    },
    "keyword": {
        "type": "string",
        "example": "Paleo"
    },
    "userInput": {
        "type": "object",
        "parameters": {
            "name": {
                "type": "string",
                "example": "user123"
            },
            "roles": {
                "type": "array",
                "items": {
                    "type": "string",
                    "enum": [
                        "admin",
                        "user"
                    ],
                    "default": "user"
                }
            },
            "password": {
                "type": "String",
                "example": "123456789"
            }
        }
    },
    "UserUpdateInput": {
        "type": "object",
        "properties": {
            "name": {
                "type": "string",
                "example": "new_user123"
            },
            "roles": {
                "type": "array",
                "items": {
                    "type": "string",
                    "enum": [
                        "admin",
                        "user"
                    ],
                    "default": "user"
                }
            }
        }
    },
    "UserPartialUpdateInput": {
        "type": "object",
        "properties": {
            "name": {
                "type": "string"
            },
            "roles": {
                "type": "array",
                "items": {
                    "type": "string",
                    "enum": [
                        "admin",
                        "user"
                    ],
                    "default": "user"
                }
            },
            "currentPassword": {
                "type": "string",
                "format": "password"
            },
            "newPassword": {
                "type": "string",
                "format": "password"
            }
        }
    }
  }
}

